import os
import numpy as np
from Bio import PDB, SeqIO
import pandas as pd
import re
import json

# Functions to interpret AlphaFold results, comparing them with the initial target structure
def get_ca_rmsd(initial_structure_path, designed_structure_path):
    '''Returns the C-alpha RMSD between two pdb structures'''
    parser = PDB.PDBParser(QUIET=True)
    initial_structure = parser.get_structure("initial", initial_structure_path)
    designed_structure = parser.get_structure("designed", designed_structure_path)
    initial_atoms = [atom for atom in initial_structure.get_atoms() if atom.name == "CA"]
    designed_atoms = [atom for atom in designed_structure.get_atoms() if atom.name == "CA"]
    if len(initial_atoms) != len(designed_atoms):
        raise ValueError("The structures have different numbers of C-alpha atoms.")
    super_imposer = PDB.Superimposer()
    super_imposer.set_atoms(initial_atoms, designed_atoms)
    return super_imposer.rms

def get_chain_length(chain):
    return sum(1 for res in chain)

def cumulative_chain_lengths (structure):
    '''
    Returns a dictionary with the cumulative length of each chain in the structure. e.g. {'A': 0, 'B': 230, 'C': 472, 'D': 702...}
    '''
    cumulative_lengths = {}
    cumulative = 0
    for chain in structure[0]:
        cumulative_lengths[chain.id] = cumulative
        cumulative += get_chain_length(chain)
    return cumulative_lengths

def find_contacts(pdb_file, chain_pairs, distance=8.0, atom_type='CA'):
    '''
    Finds the contacts between the atoms of the chains in chain_pairs according to the distance threshold
    Args:
        pdb_file (str): Path to the pdb file
        chain_pairs (list): List of tuples with the chain ids of the chains to be compared. e.g. [('A', 'C'), ('A', 'D'), ('B', 'C'), ('B', 'D')]
        distance (float): Distance threshold for the contacts
        atom_type (str): Atom type to be considered for the contacts. Usually CA or CB
    Returns:
        contacts_global_id(list): List of tuples with the residue ids of the interface residues
    '''
    parser = PDB.PDBParser(QUIET=True)
    structure = parser.get_structure('structure', pdb_file)
    contacts = []
    contacts_global_id = []
    cumulative_lengths = cumulative_chain_lengths(structure)
    for chain_1_id, chain_2_id in chain_pairs:
        chain_1 = [atom for residue in structure[0][chain_1_id] for atom in residue if (atom.name == atom_type or (residue.resname == "GLY" and atom.name == "CA"))]
        chain_2 = [atom for residue in structure[0][chain_2_id] for atom in residue if (atom.name == atom_type or (residue.resname == "GLY" and atom.name == "CA"))]
        ns = PDB.NeighborSearch(chain_1)
        for atom in chain_2:
            close_atoms = ns.search(atom.coord, distance)
            for close_atom in close_atoms:
                contacts.append((close_atom, atom))
                global_id_1 = close_atom.parent.id[1] + cumulative_lengths[chain_1_id]
                global_id_2 = atom.parent.id[1] + cumulative_lengths[chain_2_id]
                contacts_global_id.append((global_id_1, global_id_2))
    return contacts_global_id # If desired return contacts instead of contacts_global_id for getting the atom objects

def get_interface_pAE(json_path, contacts):
    '''
    Reads the json file generated by AlphaFold to get the mean pAE score for the interface residues
    Args:
        json_path (str): Path to the json file
        contacts (list): List of tuples with the residue ids of the interface residues
    Returns:
        pAE_contacts (np.array) Array with the pAE score for the interface residues
        mean_pAE (float) Mean pAE score for the interface residues
        max_pAE (float) Max pAE score for the interface residues
    '''
    with open(json_path) as json_file:
        data = json.load(json_file)
        pae = data['pae']
        pAE_contacts = []
        for contact in contacts:
            (id_1,id_2) = contact
            pAE_contacts.append(pae[id_1-1][id_2-1])
    mean_pAE = np.mean(pAE_contacts)
    max_pAE = np.max(pAE_contacts)
    return np.array(pAE_contacts), mean_pAE, max_pAE

