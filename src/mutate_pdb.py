import os
import re
import argparse
import faulthandler
faulthandler.enable()

from pyrosetta import get_score_function, pose_from_file, init
from pyrosetta.rosetta.protocols.analysis import InterfaceAnalyzerMover
from pyrosetta.toolbox.mutants import mutate_residue
from pyrosetta.rosetta.core.pose import Pose
from Bio import SeqIO
import os
init()

parser = argparse.ArgumentParser(description="Use fasta files to mutate PDB files (from structures_folder_path structures).")
parser.add_argument('--fasta_file_path', required=True, help='Full path to the fasta file.')
parser.add_argument('--structures_folder_path', required=True, help='Full path to the folder containing initial structures.')
parser.add_argument('--scores_folder', required=True, help='Full path to the folder where scores will be saved. e.g. OptimizationScores')
parser.add_argument('--output_folder', required=True, help='Full path to the folder where optimized sequences will be saved. e.g. OptimizedSequences')

args = parser.parse_args()

sfxn = get_score_function()

def get_energy_after_mutation (initial_structure_path, fasta_mutated_path, sfxn, packing_distance=3.5, fast_relax=False, interface_chains=None):
    '''Returns the energy of the structure with the backbone conformation of the initial structure mutated 
    according to the ProteinMPNN generated sequence. In addition, generates several scores for the interface analysis.
    Args:
        initial_structure_path (str): Path to the initial structure
        fasta_mutated_path (str): Path to the fasta file with the mutated sequence generated by ProteinMPNN
        sfxn (pyrosetta ScoreFunction): ScoreFunction to be used for the energy calculation
        packing_distance (float):   Radius used to define neighboring residues to be repacked after the mutation 
                                    (In alpha helices, the distance between C-alpha atoms is around 1.47 Å)
        fast_relax (bool): If True, performs FastRelax to the mutated structure, repacking all the structure
        interface_chains (str): String with the chain ids of the chains to be considered for the interface analysis. 
                                e.g. 'AB_CD' for the interface between chains A and B with chains C and D
    Returns:
        mutated_pose (pyrosetta Pose): Pose with the mutated sequence
        energy (float): Rosetta score of the mutated structure
        interface_energy (float): Rosetta score of the interface residues
        number_mutated_residues (int): Number of mutated residues
    '''
    base_pose = pose_from_file(initial_structure_path)
    pose = Pose()
    pose.assign(base_pose)
    with open(fasta_mutated_path) as fasta_file:
        mutated_sequence = SeqIO.read(fasta_file, "fasta")
        mutated_sequence = str(mutated_sequence.seq).replace(':', '')
    if len(mutated_sequence) != pose.size():
        raise ValueError(
            f"Sequence length {len(mutated_sequence)} != PDB length {pose.size()}"
        )

    number_mutated_residues = 0
    for i, res in enumerate(mutated_sequence):
        if pose.sequence()[i] != res:
            mutate_residue(pose, i+1, res, packing_distance)
            number_mutated_residues += 1
    energy = sfxn.score(pose)

    interface_energy = sc_value = packstat = total_hb_E = None
    if interface_chains:
        interface_analyzer = InterfaceAnalyzerMover()
        interface_analyzer.set_interface(interface_chains)
        interface_analyzer.apply(pose)
        interface_energy = interface_analyzer.get_interface_dG()
        data = interface_analyzer.get_all_data()
        sc_value = data.sc_value
        packstat = data.packstat
        total_hb_E = data.total_hb_E
    else:
        interface_energy = None
    return pose, energy, interface_energy, number_mutated_residues, sc_value, packstat, total_hb_E


def mutate_file(structures_folder_path, fasta_file_path,
                scores_folder, sfxn, output_folder,
                packing_distance=3.5, fast_relax=False, interface_chains=None):

    filename               = os.path.basename(fasta_file_path)
    initial_structure_name = re.sub(r'_rank\d{1,3}\.fa$', '.pdb', filename)
    initial_structure_path = os.path.join(structures_folder_path, initial_structure_name)

    print(f'Mutating {initial_structure_path} with {fasta_file_path}…')
    pose, energy, iface_dG, n_mut, sc, pack, hb = get_energy_after_mutation(
        initial_structure_path,
        fasta_file_path,
        sfxn,
        packing_distance=packing_distance,
        fast_relax=fast_relax,
        interface_chains=interface_chains
    )

    os.makedirs(output_folder, exist_ok=True)
    out_pdb = os.path.join(output_folder, filename.replace('.fa', '.pdb'))
    pose.dump_pdb(out_pdb)

    os.makedirs(scores_folder, exist_ok=True)
    scores_csv = os.path.join(scores_folder, f'{filename}.csv')
    with open(scores_csv, 'a') as f:
        f.write(f"{filename},{energy},{iface_dG},{n_mut},{sc},{pack},{hb}\n")

    print(f"Done mutating {initial_structure_path} with {fasta_file_path}...")
    
mutate_file (args.structures_folder_path, args.fasta_file_path, args.scores_folder, sfxn, args.output_folder)